struct Grade {
    var letter: Character
    var points: Double
    var credits: Double
}

class Person {
    var firstName: String
    var lastName: String
    init(firstName: String, lastName: String) {
    self.firstName = firstName
    self.lastName = lastName
    }
}

class Student {
    var firstName: String
    var lastName: String
    var grades: [Grade] = []
    init(firstName: String, lastName: String) {
        self.firstName = firstName
        self.lastName = lastName
    }
    func recordGrade(_ grade: Grade) {
    grades.append(grade)
    }
}

This simple case demonstrates the idea behind class inheritance. Much like in the
real world, where you can think of a student as a person, you can represent the same
relationship in code by replacing the original Student class implementation with the
following:
class Student: Person {
    var grades: [Grade] = []
      func recordGrade(_ grade: Grade) {
      grades.append(grade)
      }
}

class BandMember: Student {
        var minimumPracticeTime = 2
    }

class OboePlayer: BandMember {
    // This is an example of an override, which weâ€™ll cover soon.
      override var minimumPracticeTime: Int {
      get {
      super.minimumPracticeTime * 2
      }
      set {
      super.minimumPracticeTime = newValue / 2
      }
}


func phonebookName(_ person: Person) -> String {
  "\(person.lastName), \(person.firstName)"
}
let person = Person(firstName: "Johnny", lastName: "Appleseed")
let oboePlayer = OboePlayer(firstName: "Jane",
lastName: "Appleseed")
phonebookName(person) // Appleseed, Johnny
phonebookName(oboePlayer) // Appleseed, Jane
